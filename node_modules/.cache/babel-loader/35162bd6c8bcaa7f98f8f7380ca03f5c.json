{"ast":null,"code":"import { mockData } from \"./mockData\";\nimport axios from 'axios';\n/**\n *\n * @param {*} events:\n * The following function should be in the “api.js” file.\n * This function takes an events array, then uses map to create a new array with only locations.\n * It will also remove all duplicates by creating another new array using the spread operator and spreading a Set.\n * The Set will remove all duplicates from the array.\n */\n\nexport const extractLocations = events => {\n  var extractLocations = events.map(event => event.location);\n  var locations = [...new Set(extractLocations)];\n  return locations;\n};\nexport const extractTitle = events => {\n  var extractSummary = events.map(event => event.summary);\n  var summary = [...new Set(extractSummary)];\n  return summary;\n};\n\nconst checkToken = async accessToken => {\n  const result = await fetch(`https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`).then(res => res.json()).catch(error => error.json());\n  return result;\n};\n\nexport const getEvents = async () => {\n  NProgress.start();\n\n  if (window.location.href.startsWith('http://localhost')) {\n    NProgress.done();\n    return mockData;\n  }\n\n  const token = await getAccessToken();\n\n  if (token) {\n    removeQuery();\n    const url = `YOUR_GET_EVENTS_API_ENDPOINT/${token}`;\n    const result = await axios.get(url);\n\n    if (result.data) {\n      var locations = extractLocations(result.data.events);\n      localStorage.setItem(\"lastEvents\", JSON.stringify(result.data));\n      localStorage.setItem(\"locations\", JSON.stringify(locations));\n    }\n\n    NProgress.done();\n    return result.data.events;\n  }\n};\nexport const getAccessToken = async () => {\n  const accessToken = localStorage.getItem('access_token');\n\n  if (!accessToken || tokenCheck.error) {\n    await localStorage.removeItem(\"access_token\");\n    const searchParams = new URLSearchParams(window.location.search);\n    const code = await searchParams.get(\"code\");\n\n    if (!code) {\n      const results = await axios.get(\"YOUR_SERVERLESS_GET_AUTH_URL_ENDPOINT\");\n      const {\n        authUrl\n      } = results.data;\n      return window.location.href = authUrl;\n    }\n\n    return code && getToken(code);\n  }\n\n  return accessToken;\n};","map":{"version":3,"sources":["/Users/asoudry/Desktop/meet/src/api.js"],"names":["mockData","axios","extractLocations","events","map","event","location","locations","Set","extractTitle","extractSummary","summary","checkToken","accessToken","result","fetch","then","res","json","catch","error","getEvents","NProgress","start","window","href","startsWith","done","token","getAccessToken","removeQuery","url","get","data","localStorage","setItem","JSON","stringify","getItem","tokenCheck","removeItem","searchParams","URLSearchParams","search","code","results","authUrl","getToken"],"mappings":"AAAA,SAASA,QAAT,QAAyB,YAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,gBAAgB,GAAIC,MAAD,IAAY;AAC1C,MAAID,gBAAgB,GAAGC,MAAM,CAACC,GAAP,CAAYC,KAAD,IAAWA,KAAK,CAACC,QAA5B,CAAvB;AACA,MAAIC,SAAS,GAAG,CAAC,GAAG,IAAIC,GAAJ,CAAQN,gBAAR,CAAJ,CAAhB;AACA,SAAOK,SAAP;AACD,CAJM;AAMP,OAAO,MAAME,YAAY,GAAIN,MAAD,IAAY;AACtC,MAAIO,cAAc,GAAGP,MAAM,CAACC,GAAP,CAAYC,KAAD,IAAWA,KAAK,CAACM,OAA5B,CAArB;AACA,MAAIA,OAAO,GAAG,CAAC,GAAG,IAAIH,GAAJ,CAAQE,cAAR,CAAJ,CAAd;AACA,SAAOC,OAAP;AACD,CAJM;;AAMP,MAAMC,UAAU,GAAG,MAAOC,WAAP,IAAuB;AACxC,QAAMC,MAAM,GAAG,MAAMC,KAAK,CACvB,+DAA8DF,WAAY,EADnD,CAAL,CAGlBG,IAHkB,CAGZC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAHI,EAIlBC,KAJkB,CAIXC,KAAD,IAAWA,KAAK,CAACF,IAAN,EAJC,CAArB;AAMA,SAAOJ,MAAP;AACD,CARD;;AAUA,OAAO,MAAMO,SAAS,GAAG,YAAY;AACnCC,EAAAA,SAAS,CAACC,KAAV;;AAEA,MAAIC,MAAM,CAAClB,QAAP,CAAgBmB,IAAhB,CAAqBC,UAArB,CAAgC,kBAAhC,CAAJ,EAAyD;AACvDJ,IAAAA,SAAS,CAACK,IAAV;AACA,WAAO3B,QAAP;AACD;;AAED,QAAM4B,KAAK,GAAG,MAAMC,cAAc,EAAlC;;AAEA,MAAID,KAAJ,EAAW;AACTE,IAAAA,WAAW;AACX,UAAMC,GAAG,GAAI,gCAA+BH,KAAM,EAAlD;AACA,UAAMd,MAAM,GAAG,MAAMb,KAAK,CAAC+B,GAAN,CAAUD,GAAV,CAArB;;AACA,QAAIjB,MAAM,CAACmB,IAAX,EAAiB;AACf,UAAI1B,SAAS,GAAGL,gBAAgB,CAACY,MAAM,CAACmB,IAAP,CAAY9B,MAAb,CAAhC;AACA+B,MAAAA,YAAY,CAACC,OAAb,CAAqB,YAArB,EAAmCC,IAAI,CAACC,SAAL,CAAevB,MAAM,CAACmB,IAAtB,CAAnC;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCC,IAAI,CAACC,SAAL,CAAe9B,SAAf,CAAlC;AACD;;AACDe,IAAAA,SAAS,CAACK,IAAV;AACA,WAAOb,MAAM,CAACmB,IAAP,CAAY9B,MAAnB;AACD;AAEF,CAvBM;AAyBP,OAAO,MAAM0B,cAAc,GAAG,YAAY;AACxC,QAAMhB,WAAW,GAAGqB,YAAY,CAACI,OAAb,CAAqB,cAArB,CAApB;;AACA,MAAI,CAACzB,WAAD,IAAgB0B,UAAU,CAACnB,KAA/B,EAAsC;AACpC,UAAMc,YAAY,CAACM,UAAb,CAAwB,cAAxB,CAAN;AACA,UAAMC,YAAY,GAAG,IAAIC,eAAJ,CAAoBlB,MAAM,CAAClB,QAAP,CAAgBqC,MAApC,CAArB;AACA,UAAMC,IAAI,GAAG,MAAMH,YAAY,CAACT,GAAb,CAAiB,MAAjB,CAAnB;;AACA,QAAI,CAACY,IAAL,EAAW;AACT,YAAMC,OAAO,GAAG,MAAM5C,KAAK,CAAC+B,GAAN,CACpB,uCADoB,CAAtB;AAGA,YAAM;AAAEc,QAAAA;AAAF,UAAcD,OAAO,CAACZ,IAA5B;AACA,aAAQT,MAAM,CAAClB,QAAP,CAAgBmB,IAAhB,GAAuBqB,OAA/B;AACD;;AACD,WAAOF,IAAI,IAAIG,QAAQ,CAACH,IAAD,CAAvB;AACD;;AACD,SAAO/B,WAAP;AACD,CAhBM","sourcesContent":["import { mockData } from \"./mockData\";\nimport axios from 'axios';\n\n/**\n *\n * @param {*} events:\n * The following function should be in the “api.js” file.\n * This function takes an events array, then uses map to create a new array with only locations.\n * It will also remove all duplicates by creating another new array using the spread operator and spreading a Set.\n * The Set will remove all duplicates from the array.\n */\nexport const extractLocations = (events) => {\n  var extractLocations = events.map((event) => event.location);\n  var locations = [...new Set(extractLocations)];\n  return locations;\n};\n\nexport const extractTitle = (events) => {\n  var extractSummary = events.map((event) => event.summary);\n  var summary = [...new Set(extractSummary)];\n  return summary;\n};\n\nconst checkToken = async (accessToken) => {\n  const result = await fetch(\n    `https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`\n  )\n    .then((res) => res.json())\n    .catch((error) => error.json());\n\n  return result;\n};\n\nexport const getEvents = async () => {\n  NProgress.start();\n\n  if (window.location.href.startsWith('http://localhost')) {\n    NProgress.done();\n    return mockData;\n  }\n  \n  const token = await getAccessToken();\n\n  if (token) {\n    removeQuery();\n    const url = `YOUR_GET_EVENTS_API_ENDPOINT/${token}`;\n    const result = await axios.get(url);\n    if (result.data) {\n      var locations = extractLocations(result.data.events);\n      localStorage.setItem(\"lastEvents\", JSON.stringify(result.data));\n      localStorage.setItem(\"locations\", JSON.stringify(locations));\n    }\n    NProgress.done();\n    return result.data.events;\n  }\n\n}\n\nexport const getAccessToken = async () => {\n  const accessToken = localStorage.getItem('access_token');\n  if (!accessToken || tokenCheck.error) {\n    await localStorage.removeItem(\"access_token\");\n    const searchParams = new URLSearchParams(window.location.search);\n    const code = await searchParams.get(\"code\");\n    if (!code) {\n      const results = await axios.get(\n        \"YOUR_SERVERLESS_GET_AUTH_URL_ENDPOINT\"\n      );\n      const { authUrl } = results.data;\n      return (window.location.href = authUrl);\n    }\n    return code && getToken(code);\n  }\n  return accessToken;\n}"]},"metadata":{},"sourceType":"module"}