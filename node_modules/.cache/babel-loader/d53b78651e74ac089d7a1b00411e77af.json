{"ast":null,"code":"import { mockData } from \"./mockData\";\n/**\n *\n * @param {*} events:\n * The following function should be in the “api.js” file.\n * This function takes an events array, then uses map to create a new array with only locations.\n * It will also remove all duplicates by creating another new array using the spread operator and spreading a Set.\n * The Set will remove all duplicates from the array.\n */\n\nexport const extractLocations = events => {\n  var extractLocations = events.map(event => event.location);\n  var locations = [...new Set(extractLocations)];\n  return locations;\n};\nexport const extractTitle = events => {\n  var extractSummary = events.map(event => event.summary);\n  var summary = [...new Set(extractSummary)];\n  return summary;\n};\n\nconst checkToken = async accessToken => {\n  const result = await fetch(`https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`).then(res => res.json()).catch(error => error.json());\n  return result;\n};\n\nexport const getEvents = async () => {\n  return mockData;\n};\nexport const getAccessToken = async () => {\n  const accessToken = localStorage.getItem('access_token');\n\n  if (!accessToken || tokenCheck.error) {\n    await localStorage.removeItem(\"access_token\");\n    const searchParams = new URLSearchParams(window.location.search);\n    const code = await searchParams.get(\"code\");\n\n    if (!code) {\n      const results = await axios.get(\"YOUR_SERVERLESS_GET_AUTH_URL_ENDPOINT\");\n      const {\n        authUrl\n      } = results.data;\n      return window.location.href = authUrl;\n    }\n\n    return code && getToken(code);\n  }\n\n  return accessToken;\n};","map":{"version":3,"sources":["/Users/asoudry/Desktop/meet/src/api.js"],"names":["mockData","extractLocations","events","map","event","location","locations","Set","extractTitle","extractSummary","summary","checkToken","accessToken","result","fetch","then","res","json","catch","error","getEvents","getAccessToken","localStorage","getItem","tokenCheck","removeItem","searchParams","URLSearchParams","window","search","code","get","results","axios","authUrl","data","href","getToken"],"mappings":"AAAA,SAASA,QAAT,QAAyB,YAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,gBAAgB,GAAIC,MAAD,IAAY;AAC1C,MAAID,gBAAgB,GAAGC,MAAM,CAACC,GAAP,CAAYC,KAAD,IAAWA,KAAK,CAACC,QAA5B,CAAvB;AACA,MAAIC,SAAS,GAAG,CAAC,GAAG,IAAIC,GAAJ,CAAQN,gBAAR,CAAJ,CAAhB;AACA,SAAOK,SAAP;AACD,CAJM;AAMP,OAAO,MAAME,YAAY,GAAIN,MAAD,IAAY;AACtC,MAAIO,cAAc,GAAGP,MAAM,CAACC,GAAP,CAAYC,KAAD,IAAWA,KAAK,CAACM,OAA5B,CAArB;AACA,MAAIA,OAAO,GAAG,CAAC,GAAG,IAAIH,GAAJ,CAAQE,cAAR,CAAJ,CAAd;AACA,SAAOC,OAAP;AACD,CAJM;;AAMP,MAAMC,UAAU,GAAG,MAAOC,WAAP,IAAuB;AACxC,QAAMC,MAAM,GAAG,MAAMC,KAAK,CACvB,+DAA8DF,WAAY,EADnD,CAAL,CAGlBG,IAHkB,CAGZC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAHI,EAIlBC,KAJkB,CAIXC,KAAD,IAAWA,KAAK,CAACF,IAAN,EAJC,CAArB;AAMA,SAAOJ,MAAP;AACD,CARD;;AAUA,OAAO,MAAMO,SAAS,GAAG,YAAY;AACnC,SAAOpB,QAAP;AACD,CAFM;AAIP,OAAO,MAAMqB,cAAc,GAAG,YAAY;AACxC,QAAMT,WAAW,GAAGU,YAAY,CAACC,OAAb,CAAqB,cAArB,CAApB;;AACA,MAAI,CAACX,WAAD,IAAgBY,UAAU,CAACL,KAA/B,EAAsC;AACpC,UAAMG,YAAY,CAACG,UAAb,CAAwB,cAAxB,CAAN;AACA,UAAMC,YAAY,GAAG,IAAIC,eAAJ,CAAoBC,MAAM,CAACvB,QAAP,CAAgBwB,MAApC,CAArB;AACA,UAAMC,IAAI,GAAG,MAAMJ,YAAY,CAACK,GAAb,CAAiB,MAAjB,CAAnB;;AACA,QAAI,CAACD,IAAL,EAAW;AACT,YAAME,OAAO,GAAG,MAAMC,KAAK,CAACF,GAAN,CACpB,uCADoB,CAAtB;AAGA,YAAM;AAAEG,QAAAA;AAAF,UAAcF,OAAO,CAACG,IAA5B;AACA,aAAQP,MAAM,CAACvB,QAAP,CAAgB+B,IAAhB,GAAuBF,OAA/B;AACD;;AACD,WAAOJ,IAAI,IAAIO,QAAQ,CAACP,IAAD,CAAvB;AACD;;AACD,SAAOlB,WAAP;AACD,CAhBM","sourcesContent":["import { mockData } from \"./mockData\";\n\n/**\n *\n * @param {*} events:\n * The following function should be in the “api.js” file.\n * This function takes an events array, then uses map to create a new array with only locations.\n * It will also remove all duplicates by creating another new array using the spread operator and spreading a Set.\n * The Set will remove all duplicates from the array.\n */\nexport const extractLocations = (events) => {\n  var extractLocations = events.map((event) => event.location);\n  var locations = [...new Set(extractLocations)];\n  return locations;\n};\n\nexport const extractTitle = (events) => {\n  var extractSummary = events.map((event) => event.summary);\n  var summary = [...new Set(extractSummary)];\n  return summary;\n};\n\nconst checkToken = async (accessToken) => {\n  const result = await fetch(\n    `https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`\n  )\n    .then((res) => res.json())\n    .catch((error) => error.json());\n\n  return result;\n};\n\nexport const getEvents = async () => {\n  return mockData;\n}\n\nexport const getAccessToken = async () => {\n  const accessToken = localStorage.getItem('access_token');\n  if (!accessToken || tokenCheck.error) {\n    await localStorage.removeItem(\"access_token\");\n    const searchParams = new URLSearchParams(window.location.search);\n    const code = await searchParams.get(\"code\");\n    if (!code) {\n      const results = await axios.get(\n        \"YOUR_SERVERLESS_GET_AUTH_URL_ENDPOINT\"\n      );\n      const { authUrl } = results.data;\n      return (window.location.href = authUrl);\n    }\n    return code && getToken(code);\n  }\n  return accessToken;\n}"]},"metadata":{},"sourceType":"module"}